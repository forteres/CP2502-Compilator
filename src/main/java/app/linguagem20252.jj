options {
    STATIC = false;
}

PARSER_BEGIN(Linguagem20252)
package app;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Linguagem20252 {

    public static java.util.ArrayList analisar(InputStream input) throws ParseException {
            Linguagem20252 lexer = new Linguagem20252(input);
            java.util.ArrayList tokens = new java.util.ArrayList();
            Token token;
            do {
                token = lexer.getNextToken();
                tokens.add(token);
            } while (token.kind != Linguagem20252Constants.EOF);

            return tokens;
        }

}


PARSER_END(Linguagem20252)



SKIP:
{
< BLANK_SPACE: " ">
| <END_OF_LINE: "\n">
| <NEW_LINE:"\r">
| <TABULATION:"\t">
}

SPECIAL_TOKEN :
{
    < SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    | < BLOCK_COMMENT: "/*" (~["*"] | "*" (~["/"]))* "*/">
    
}

TOKEN: {
        // LITERAIS ------------------------------------------
         < MALFORMED_REAL: (["0"-"9"])+ "." (["0"-"9"])* (["a"-"z","A"-"Z","_"])+ (["0"-"9","a"-"z","A"-"Z","_"])* >
        | < REAL: (["0"-"9"])+ "." (["0"-"9"])+>
        | < MALFORMED_NUMBER: (["0"-"9"])+ (["a"-"z","A"-"Z","_"])+ (["0"-"9"])*>
        | < NUMBER: (["0"-"9"])+>
        | < TEXT_DOUBLE: "\"" ( (~["\"","\\","\n","\r"]) | ("\\" ~[]) )* "\"" >
        | < TEXT_SINGLE: "'"  ( (~["'","\\","\n","\r"])  | ("\\" ~[]) )* "'" >
        | < UNCLOSED_STRING: ("\"" | "\'") ( (~["\"", "'","\\","\n","\r"]) | ("\\" ~[]) )+ >
        | < UNCLOSED_QUOTE: ("\"" | "\'") >

        // SIMBOLOS ESPECIAIS --------------------------------

        | < ASSIGN: "=" >
        | < EQUAL: "==" >
        | < NOT_EQUAL: "!=" >
        | < SEMICOLON: ";" >
        | < COLON: ":" >
        | < COMMA: "," >
        | < DOT: "." >
        | < LBRACE: "{" >
        | < RBRACE: "}" >
        | < LBRACKET: "[" >
        | < RBRACKET: "]" >
        | < LPAREN: "(" >
        | < RPAREN: ")" >
        | < PLUS: "+" >
        | < MINUS: "-" >
        | < STAR: "*" >
        | < SLASH: "/" >
        | < PERCENT: "%" >
        | < POWER: "**" >
        | < DOUBLE_PERCENT: "%%" >
        | < SHIFT_LEFT: "<<" >
        | < SHIFT_RIGHT: ">>" >
        | < SHIFT_LEFT_ASSIGN: "<<=" >
        | < SHIFT_RIGHT_ASSIGN: ">>=" >
        | < EXCLAMATION: "!" >
        | < PIPE: "|" >
        | < AMPERSAND: "&" >

        // TIPOS PRIMITIVOS ----------------------------------

        | < TYPE_NUM:  (("n"|"N")("u"|"U")("m"|"M")) >
        | < TYPE_REAL: (("r"|"R")("e"|"E")("a"|"A")("l"|"L")) >
        | < TYPE_TEXT: (("t"|"T")("e"|"E")("x"|"X")("t"|"T")) >
        | < TYPE_FLAG: (("f"|"F")("l"|"L")("a"|"A")("g"|"G")) >

        // PALAVRAS RESERVADAS -----------------------------------
        | < BEGIN:   (("b"|"B")("e"|"E")("g"|"G")("i"|"I")("n"|"N")) >
        | < DEFINE:  (("d"|"D")("e"|"E")("f"|"F")("i"|"I")("n"|"N")("e"|"E")) >
        | < START:   (("s"|"S")("t"|"T")("a"|"A")("r"|"R")("t"|"T")) >
        | < END:     (("e"|"E")("n"|"N")("d"|"D")) >
        | < SET:     (("s"|"S")("e"|"E")("t"|"T")) >
        | < READ:    (("r"|"R")("e"|"E")("a"|"A")("d"|"D")) >
        | < SHOW:    (("s"|"S")("h"|"H")("o"|"O")("w"|"W")) >
        | < IF:      (("i"|"I")("f"|"F")) >
        | < THEN:    (("t"|"T")("h"|"H")("e"|"E")("n"|"N")) >
        | < ELSE:    (("e"|"E")("l"|"L")("s"|"S")("e"|"E")) >
        | < LOOP:    (("l"|"L")("o"|"O")("o"|"O")("p"|"P")) >
        | < WHILE:   (("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")) >

        // FLAG --------------------------------------------------
        | < TRUE:  (("t"|"T")("r"|"R")("u"|"U")("e"|"E")) >
        | < FALSE: (("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")) >

        // IDENTIFICADOR -------------------------------------
        | < MALFORMED_IDENTIFIER:
            (["a"-"z","A"-"Z","_"]) (((["a"-"z","A"-"Z","_"])* (["0"-"9"](["0"-"9"])+) (["a"-"z","A"-"Z","_"])*)+
            | (((["a"-"z","A"-"Z","_"])* (["0"-"9"] ["a"-"z","A"-"Z","_"])*)* ["0"-"9"]))
        >
        | < IDENTIFIER: ["a"-"z","A"-"Z","_"] ((["a"-"z","A"-"Z","_"])* (["0"-"9"] ["a"-"z","A"-"Z","_"])*)* >

        // ERRO ----------------------------------------------

        | < INVALID_SIMBOL: ~[]>
    }