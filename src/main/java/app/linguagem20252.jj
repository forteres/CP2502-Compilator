options {
    STATIC = false;
}

PARSER_BEGIN(Linguagem20252)

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Linguagem20252 {

    public static void analisar(InputStream input) throws ParseException {
        Linguagem20252 lexer = new Linguagem20252(input);

        System.out.println("Iniciando a análise léxica...");
        System.out.println("------------------------------");

        Token t;
        do {
          t = lexer.getNextToken();
          System.out.println("Lexema: " + t.image + " | Categoria: " + TokenUtils.getCategory(t.kind) + " | Codigo: "+ t.kind);
        } while (t.kind != Linguagem20252Constants.EOF);

        System.out.println("------------------------------");
        System.out.println("Análise léxica concluída.");
      }

      // main só serve para testes no terminal
      public static void main(String[] args) throws Exception {
        InputStream input = System.in;
        if (args.length > 0) {
          input = new FileInputStream(args[0]);
        }
        analisar(input);
      }

}


PARSER_END(Linguagem20252)



SKIP:
{
< BLANK_SPACE: " ">
| <END_OF_LINE: "\n">
| <NEW_LINE:"\r">
| <TABULATION:"\t">
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <BLOCK_COMMENT: "/*" (~[] | "*")* "*/">
}

TOKEN: {
        // LITERAIS ------------------------------------------
        < NUMBER: (["0"-"9"])+ >
        | < REAL: (["0"-"9"])+ "." (["0"-"9"])+>
        | < LETTER: (["a"-"z","A"-"Z"])>
        | < TEXT: "\"" ( ["\u0000"-"\u007F"] ) "\"" | "'" ( ["\u0000"-"\u007F"] ) "'" >
        | < UNCLOSED_STRING: "\"" ( (~["\"","\\","\n","\r"]) | ("\\" ~[]) )+ >
        | < UNCLOSED_QUOTE: "\"" >

        // SIMBOLOS ESPECIAIS --------------------------------

        | < ASSIGN: "=" >
        | < EQUAL: "==" >
        | < NOT_EQUAL: "!=" >
        | < SEMICOLON: ";" >
        | < COLON: ":" >
        | < COMMA: "," >
        | < DOT: "." >
        | < LBRACE: "{" >
        | < RBRACE: "}" >
        | < LBRACKET: "[" >
        | < RBRACKET: "]" >
        | < LPAREN: "(" >
        | < RPAREN: ")" >
        | < PLUS: "+" >
        | < MINUS: "-" >
        | < STAR: "*" >
        | < SLASH: "/" >
        | < PERCENT: "%" >
        | < POWER: "**" >
        | < DOUBLE_PERCENT: "%%" >
        | < SHIFT_LEFT: "<<" >
        | < SHIFT_RIGHT: ">>" >
        | < SHIFT_LEFT_ASSIGN: "<<=" >
        | < SHIFT_RIGHT_ASSIGN: ">>=" >
        | < EXCLAMATION: "!" >
        | < PIPE: "|" >
        | < AMPERSAND: "&" >

        // TIPOS PRIMITIVOS ----------------------------------

        | < TYPE_NUM: "num">
        | < TYPE_REAL: "real">
        | < TYPE_TEXT: "text">
        | < TYPE_FLAG: "flag">

        // PALAVRAS RESERVADAS -------------------------------

        | < BEGIN: "begin">
        | < DEFINE: "define">
        | < START: "start">
        | < END: "end">
        | < SET: "set">
        | < READ: "read">
        | < SHOW: "show">
        | < IF: "if">
        | < THEN: "then">
        | < ELSE: "else">
        | < LOOP: "loop" >
        | < WHILE: "while" >

        // FLAG ----------------------------------------------

        | < TRUE: "true">
        | < FALSE: "false">

        // IDENTIFICADOR -------------------------------------

        | < IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >

        // ERRO ----------------------------------------------

        | < ERROR: ~[]>
    }